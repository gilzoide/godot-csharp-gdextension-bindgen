// This code was automatically generated by GDExtension C# Bindgen
using System;
using System.Diagnostics.CodeAnalysis;
using Godot;

namespace GDExtensionBindgen;

public class LuaFunction : LuaObject
{
	public new static readonly StringName ClassName = "LuaFunction";

	public LuaFunction() : base(ClassName)
	{
	}
	protected LuaFunction(StringName @class) : base(@class)
	{
	}
	protected LuaFunction(Variant variant) : base(variant)
	{
	}
	protected LuaFunction([NotNull] RefCounted @object) : base(@object)
	{
	}

	public static implicit operator RefCounted(LuaFunction self) => self?._object;
	public static implicit operator Variant(LuaFunction self) => self?._object;
	public static explicit operator LuaFunction(Variant variant) => new(variant);

	#region Methods

	public Godot.Variant Invokev(Godot.Collections.Array @arg_array)
	{
		return (Godot.Variant)_object.Call("invokev", @arg_array);
	}

	public Godot.Variant Invoke(params Godot.Variant[] varargs)
	{
		return (Godot.Variant)_object.Call("invoke", varargs);
	}

	public Godot.Callable ToCallable()
	{
		return (Godot.Callable)_object.Call("to_callable");
	}

	#endregion
}
