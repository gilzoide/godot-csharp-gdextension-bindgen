// This code was automatically generated by GDExtension C# Bindgen
using System;
using System.Diagnostics.CodeAnalysis;
using Godot;

namespace GDExtensionBindgen;

public class LuaTable : LuaObject
{
	public new static readonly StringName ClassName = "LuaTable";

	public LuaTable() : base(ClassName)
	{
	}
	protected LuaTable(StringName @class) : base(@class)
	{
	}
	protected LuaTable(Variant variant) : base(variant)
	{
	}
	protected LuaTable([NotNull] RefCounted @object) : base(@object)
	{
	}

	public static implicit operator RefCounted(LuaTable self) => self?._object;
	public static implicit operator Variant(LuaTable self) => self?._object;
	public static explicit operator LuaTable(Variant variant) => new(variant);

	#region Methods

	public Godot.Variant Get(Godot.Variant @key, Godot.Variant @default = default)
	{
		return (Godot.Variant)_object.Call("get", @key, @default);
	}

	public void Set(Godot.Variant @key, Godot.Variant @value)
	{
		_object.Call("set", @key, @value);
	}

	public Godot.Variant Rawget(Godot.Variant @key, Godot.Variant @default = default)
	{
		return (Godot.Variant)_object.Call("rawget", @key, @default);
	}

	public void Rawset(Godot.Variant @key, Godot.Variant @value)
	{
		_object.Call("rawset", @key, @value);
	}

	public void Clear()
	{
		_object.Call("clear");
	}

	public int Length()
	{
		return (int)_object.Call("length");
	}

	public Godot.Collections.Dictionary ToDictionary()
	{
		return (Godot.Collections.Dictionary)_object.Call("to_dictionary");
	}

	public Godot.Collections.Array ToArray()
	{
		return (Godot.Collections.Array)_object.Call("to_array");
	}

	public bool IterInit(Godot.Variant @iter)
	{
		return (bool)_object.Call("_iter_init", @iter);
	}

	public bool IterNext(Godot.Variant @iter)
	{
		return (bool)_object.Call("_iter_next", @iter);
	}

	public Godot.Variant IterGet(Godot.Variant @iter)
	{
		return (Godot.Variant)_object.Call("_iter_get", @iter);
	}

	#endregion
}
